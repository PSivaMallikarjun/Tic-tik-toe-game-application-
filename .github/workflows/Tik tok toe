# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
import random

# initialize the board
board = [" ", " ", " ", " ", " ", " ", " ", " ", " "]

# print the board
def print_board():
    print(" " + board[0] + " | " + board[1] + " | " + board[2] + " ")
    print("---+---+---")
    print(" " + board[3] + " | " + board[4] + " | " + board[5] + " ")
    print("---+---+---")
    print(" " + board[6] + " | " + board[7] + " | " + board[8] + " ")

# check if the game is over
def check_game_over():
    # check rows
    for i in range(0, 9, 3):
        if board[i] == board[i+1] and board[i] == board[i+2] and board[i] != " ":
            return board[i] + " wins!"
    # check columns
    for i in range(0, 3):
        if board[i] == board[i+3] and board[i] == board[i+6] and board[i] != " ":
            return board[i] + " wins!"
    # check diagonals
    if board[0] == board[4] and board[0] == board[8] and board[0] != " ":
        return board[0] + " wins!"
    if board[2] == board[4] and board[2] == board[6] and board[2] != " ":
        return board[2] + " wins!"
    # check if there are empty squares
    if " " not in board:
        return "Tie!"
    # game continues
    return "continue"

# computer's move
def computer_move():
    # choose a random square
    square = random.randint(0, 8)
    # check if the square is already occupied
    while board[square] != " ":
        square = random.randint(0, 8)
    # mark the square
    board[square] = "X"

# initialize the board
board[4] = "X"

# main loop
while True:
    print_board()
    # user's move
    user_move = int(input("Enter your move (1-9): ")) - 1
    # check if the square is already occupied
    while board[user_move] != " ":
        print("This square is already occupied!")
        user_move = int(input("Enter your move (1-9): ")) - 1
    # mark the square
    board[user_move] = "O"
    # check if the game is over
    result = check_game_over()
    if result != "continue":
        print_board()
        print(result)
        break
    # computer's move
    computer_move()
    # check if the game is over
    result = check_game_over()
    if result != "continue":
        print_board()
        print(result)
        break
